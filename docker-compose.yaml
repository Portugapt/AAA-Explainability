# This version hides the underlying postgres database on a backend network
# different from the frontend network on which nginx interfaces mlflow.
# And mlflow is hidden behind nginx, allowing user auth to be implemented.
# 
# Have the following environment vars set in shell before running docker-compose
# (suggested values here but can use whatever desired):
# export DB_NAME=mlflowdb
# export DB_USER=postgres
# export DB_PW=<somepassword>
# export DB_PORT=5432
# export MLFLOW_PORT=5000
#
# AWS S3 bucket can be used instead of local drive for artifacts store via
# commented-out environment lines below.

version: '3.3'

services:
    db:
        restart: always
        image: postgres:latest
        container_name: mlflow_db
        expose:
            - ${DB_PORT}
        networks:
            - backend
            - frontend
        environment:
            - MUID=$UID
            - MGID=$GID
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PW}
        volumes:
            - ./source/artifacts/postgres-data:/var/lib/postgresql/data

    app:
        restart: always
        build: ./mlflow
        image: mlflow_server
        container_name: mlflow_server
        expose:
            - 5001
        networks:
            - frontend
            - backend
        environment:
            - BACKEND=postgresql://${DB_USER}:${DB_PW}@db:${DB_PORT}/${DB_NAME}
            - ARTIFACTS=/source/artifacts/mlruns
        volumes:
            - ./source/3_modeling/mlruns:/mlruns
            - condenv:/opt/conda
        command: 
            - sh    # (sh allows for var substitution of BACKEND and ARTIFACTS)
            - -c
            - mlflow server 
                --port 5001
                --host 0.0.0.0 
                --backend-store-uri $${BACKEND} 
                --default-artifact-root $${ARTIFACTS}
        depends_on:
            - db

    jupyter:
        build: ./jupyter
        image: jupyter_server
        container_name: jupyter_server
        expose:
            - 8888
        environment:
            - MLFLOW_TRACKING_URI=postgresql://${DB_USER}:${DB_PW}@db:${DB_PORT}/${DB_NAME}
        networks:
            - frontend
            - backend
        volumes:
            - ./source://home/jovyan/work
            - ./source/3_modeling/mlruns:/mlruns


    nginx:
        restart: always
        build: ./nginx
        image: mlflow_nginx
        container_name: mlflow_nginx
        ports:
            - "${MLFLOW_PORT}:80"
            - "${JUPYTER_PORT}:8888"
        networks:
            - frontend
        depends_on:
            - app
            - jupyter


networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    mlrun_data:
    condenv: